#Agata Brete Jõpiselg
#16.01/24
#IT-23 HKHK
import random
"""
17. Email
	Kasutaja lisab emaili kujul enimi.pnimi@server.com
	Programm kontrollib kas email on sisestatud Ćµigesti
	Programm tĆ¼keldab selle ja vĆ¤ljastab lause: Tere enimi,
    sinu email on server serveris ja domeeniks on sul com
"""
def analuus_email(email):
    nimi, server_info = email.split('@')
    server, domeen = server_info.split('.')
    print(f"Tere {nimi}, sinu email on serveris {server} ja domeeniks on sul {domeen}")

email = input("Sisesta oma e-posti aadress: ")

analuus_email(email)

"""
15. Temperatuurid - Programm peab tĆ¶Ć¶tlema Ć¼he aasta kĆµigi pĆ¤evade temperatuure.
    Kirjutada programm, mis leiab kuude kaupa, mitmendal kuupĆ¤eval oli kĆµige soojem.
    VĆ¤ljasta kuupĆ¤ev ja vastav temperatuur. 
    (Kui sama temperatuuriga oli mitu pĆ¤eva, vĆ¤ljasta vĆ¤hemalt Ć¼ks)
"""
temperatuurid = {
    "jaanuar": [-16, -12, -15, -20, 0, -1, -20, -2, -20, -14, -18, -8, 2, -1, -14, -7, -15, -17, -6, -17, -17, -7, 0, 3, -20, -17, -15, -8, -12, 3],
    "veebruar": [-9, -2, -7, 1, -16, -19, -19, -11, -16, -15, -9, -2, -16, -4, -20, -5, -6, -17, -5, 0, -16, 2, 0, -20, -16, -2, -18],
    "märts": [2, -9, -1, -3, -6, -2, 1, -2, -3, -9, -1, -4, 0, -6, -7, 1, 0, 2, -5, -10, 2, -7, -3, 2, -10, 2, -9, -8, -5, -2],
    "aprill": [-5, 0, 10, -9, 0, -9, -8, 6, -5, 3, -1, 4, 9, -1, 2, 0, 10, 0, 5, 0, -10, 0, 6, 3, -6, -2, -10, -8, -2],
    "mai": [12, 5, 8, -1, -2, 4, 10, -1, 7, 15, 7, 3, 6, 4, 10, 9, 13, 6, 14, 10, 14, 2, 6, 12, 15, 2, 14, 11, 9, 1],
    "juuni": [12, 5, 17, 6, 10, 14, 9, 7, 15, 23, 29, 11, 16, 18, 9, 25, 14, 8, 16, 22, 19, 22, 23, 18, 16, 16, 26, 24, 22],
    "juuli": [15, 8, 21, 28, 18, 13, 9, 9, 8, 6, 8, 12, 12, 29, 28, 20, 6, 9, 12, 8, 14, 18, 14, 13, 23, 6, 24, 24, 17, 20],
    "august": [7, 6, 5, 19, 18, 18, 17, 20, 15, 11, 7, 10, 13, 12, 20, 11, 10, 14, 18, 14, 24, 6, 17, 16, 6, 17, 5, 13, 11],
    "september": [21, 19, 21, 9, 13, 18, 6, 6, 20, 7, 25, 13, 8, 9, 14, 16, 19, 10, 7, 25, 7, 17, 16, 15, 17, 18, 15, 9, 19],
    "oktoober": [2, 2, 1, 5, -2, 5, 5, 2, 2, 2, 1, -2, 1, -2, 0, -2, 5, 4, 0, 1, -1, 2, 0, 2, 2, 2, -1, 1, 4, -1],
    "november": [-6, -7, -2, -7, -2, -4, 0, -7, -8, -6, 0, -9, -2, -3, -2, 0, -8, -2, -5, -2, -5, -8, -10, 0, -2, -9, -9, -7, -1],
    "detsember": [-15, 2, -11, -14, -15, -5, -5, -18, -18, -19, 0, 0, 2, -7, -16, -7, -4, -1, -1, -16, -18, -10, -3, -19, -6, -16, -16, -8, -2, -18]
}

kuu_max_temp = {}

for kuu, temp_list in temperatuurid.items():
    max_temp = max(temp_list)
    max_temp_index = temp_list.index(max_temp)
    kuupäev = max_temp_index + 1
    kuu_max_temp[kuu] = {"kuupäev": kuupäev, "temperatuur": max_temp}

for kuu, info in kuu_max_temp.items():
    print(f"{kuu.capitalize()}: {info['kuupäev']}. päeval, temperatuur: {info['temperatuur']} kraadi.")


"""
13. Koosta programm, mis kontrollib, kas kasutaja poolt sisestatud arv on paaris vĆµi paaritu
	kuvatakse korrektne arusaadav kĆ¼simus ja  vastus - 1p
	eelnev kontroll, kas kasutaja ei lisanud arvu vĆµi pani nulli - 2p
	kood mis teavitab paaris vĆµi paaritust arvust - 2p
	kuvatakse programmi pealkiri - 1p
"""
print("Arvude Paarsus Kontrollija")

sisend_arv = int(input("Sisesta arv (ärge sisesta nulli): "))

if sisend_arv % 2 == 0:
    print(f"{sisend_arv} on paaris arv.")
else:
    print(f"{sisend_arv} on paaritu arv.")



"""
11. Salakeel
	sinu programm kĆ¼sib kasutajalt, kas ta soovib salakeelt luua vĆµi tĆµlkida - 1p
	kasutaja sisestab tavalise sĆµna, mis muudetakse salakeeleks - 1p
	kasutaja sisestab salakeeles sĆµna, mis teisendatakse jĆ¤lle normaalseks - 1p
	kood kommenteeritud - 1p
"""
def tee_salakeel(sona):
    return ''.join(chr(ord(taht) + 10) for taht in sona)

def translate_salakeel(salakeel_sona):
    return ''.join(chr(ord(taht) - 10) for taht in salakeel_sona)

while True:
    valik = input("1. Salakeel loomiseks\n2. Salakeele tõlkimiseks\n3. Väljumiseks\nValige (1, 2 või 3): ")

    if valik == "1":
        normal_sona = input("Sisestage tavaline sõna: ")
        print(f"Salakeel: {tee_salakeel(normal_sona)}")

    elif valik == "2":
        salakeel_sona = input("Sisestage sõna Salakeeles: ")
        print(f"Tavaline sõna: {translate_salakeel(salakeel_sona)}")

    elif valik == "3":
        print("Programmist väljumine. Head aega!")
        break

    else:
        print("Vigane valik. Palun sisestage 1, 2 või 3.")



"""
9. Emaili kontroll
	kasutaja lisab emaili kujul enimi.pnimi@server.com - 1p
	programm kontrollib kas email on sisestatud Ćµigesti - vĆ¤hemalt @-mĆ¤rgi kontroll - 1p
	programm tĆ¼keldab selle ja vĆ¤ljastab lause: ā€Tere enimi,
    sinu email on server serveris ja domeeniks on sul comā€™ - 1p
	kasutajalt kĆ¼situd kĆ¼simused on selgelt Ć¼heselt mĆµistetavad - 1p
	kood kommenteeritud - 1p
"""
import re

def kontrolli_email(email):
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        print("Vigane emaili")
        return
    
    enimi, domeen = email.split('@')
    pnimi, server = enimi.split('.')
    
    print(f"Tere {enimi}, sinu email on server {server} ja domeeniks on sul {domeen}")

kasutaja_email = input("Sisesta oma email: ")

kontrolli_email(kasutaja_email)


"""
7. Eurokalkulaator - koosta programm, mis kalkuleerib valuuta vastavalt kasutaja soovile EUR->EEK vĆµi EEK->EUR.
	kuvatakse korrektne arusaadav kĆ¼simus ja vastus - 1p
	kuvatakse veateade, kui kasutaja tegi valiku valesti - 1p
	kĆ¼sitakse valuuta kogust ja tehakse arvutused - 2p
	kood kommenteeritud - 1p
"""
def eur_eek_kalk(euro_summa):
    return euro_summa * 15.6466

def eek_eur_kalk(eek_summa):
    return eek_summa * 0.0639

def main():
    valik = input("Kas soovite teha konversiooni EUR->EEK või EEK->EUR? ")

    if valik.upper() not in ['EUR->EEK', 'EEK->EUR']:
        print("Vigane valik! Palun sisestage korrektne valik.")
        return
    
    summa_str = input("Sisestage summa: ")

    if not summa_str.replace('.', '', 1).isdigit():
        print("Vigane sisend! Palun sisestage number. ")
        return
    
    summa = float(summa_str)

    tulemus = eur_eek_kalk(summa) if valik.upper() == 'EUR->EEK' else eek_eur_kalk(summa)
    print(f"{summa} {'eurot' if valik.upper() == 'EUR->EEK' else 'krooni'} on umbes {tulemus:.2f} {'krooni' if valik.upper() == 'EUR->EEK' else 'eurot'}.")

if __name__ == "__main__":
    main()

"""
5. Shopping List
	Create a program that will keep track of items for a shopping list. The program 
    should keep asking for new items until nothing is entered (no input followed by enter/return key). 
    The program should then display the full shopping list.

"""
def shopping_list():
    ostunimekiri = []

    while True:
        ese = input("Sisesta ese ostunimekirja (vajuta Enter, kui lõpetanud): ")

        if not ese:
            break

        ostunimekiri.append(ese)

    return ostunimekiri

nimekiri = shopping_list()

print("Ostunimekiri :")
for ese in nimekiri:
    print(ese)



"""
3. Positiivsed ja negatiivsed
	tee kaks loendit positiivsete ja negatiivsete arvude hoidmiseks 1p
	kasutaja sisestab 5 arvu ja programm tuvastab, kumba loendisse selle lisab 2p
	nulli lisamisel ei tehta midagi 1p
	vĆ¤ljasta mĆµlemad loendit 1p
"""

def loendid():
    pos = []
    neg = []

    for i in range(5):
        arv = float(input("Sisesta arv: "))

        if arv > 0:
            pos.append(arv)
        elif arv < 0:
            neg.append(arv)

    return pos, neg

pos_arvud, neg_arvud = loendid()

print("Positiivsed arvud:", pos_arvud)
print("Negatiivsed arvud:", neg_arvud)



"""
1. Korrutamise kontrollimine
	programm esitab korrutustehte 1p
	ootab kasutajalt vastuse sisestamist 1p
	kontrollib vastuse Ćµigsust 1p
	vĆ¤ljastab, kas vastus oli Ćµige vĆµi vĆ¤Ć¤r. 1p
	kokku antakse lahendamiseks 10 Ć¼lesannet. 1p
"""

def korrutamine():


    for i in range(10):
        a, b = random.randint(1, 10), random.randint(1, 10)
        tehe = f"{a} * {b}"
        vastus = input(f"Ülesanne: {tehe} = ")

        if int(vastus) == a * b:
            print("Õige!")
            
        else:
            print(f"Vale1Õige vastus oli {a} * {b}.")

if __name__ == "__main__":
    korrutamine()
